name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - auth
        - core
        - ai
        - advanced
        - accessibility
        - cross-browser
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - chromium
        - firefox
        - webkit

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '0'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up test matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "all" ] || [ "${{ github.event.inputs.test_suite }}" = "" ]; then
            echo "matrix={\"suite\":[\"auth\",\"core\",\"ai\",\"advanced\",\"accessibility\",\"cross-browser\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"suite\":[\"${{ github.event.inputs.test_suite }}\"]}" >> $GITHUB_OUTPUT
          fi

  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

  build-and-test:
    runs-on: ubuntu-latest
    needs: [setup, lint-and-typecheck]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: studyflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        if: matrix.suite == 'cross-browser' || matrix.suite == 'accessibility'

      - name: Install Chromium only (for other suites)
        run: npx playwright install chromium --with-deps
        if: matrix.suite != 'cross-browser' && matrix.suite != 'accessibility'

      - name: Build application
        run: npm run build

      - name: Start Supabase
        run: |
          npx supabase start
          # Wait for Supabase to be ready
          sleep 10
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Setup test database
        run: |
          # Apply migrations and seed test data
          npx supabase db reset --db-url postgresql://postgres:postgres@localhost:54322/postgres
        env:
          TEST_SUPABASE_URL: http://localhost:54321
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}

      - name: Start application server
        run: |
          npm run preview &
          # Wait for server to start
          npx wait-on http://localhost:4173 --timeout 60000
        env:
          PORT: 4173

      - name: Run E2E Tests - Authentication
        if: matrix.suite == 'auth'
        run: npx playwright test tests/e2e/auth --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173
          TEST_SUPABASE_URL: http://localhost:54321
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}
          TEST_USER_EMAIL: test@studyflow.ai
          TEST_USER_PASSWORD: TestPassword123!
          MOCK_AI_RESPONSES: true

      - name: Run E2E Tests - Core Features
        if: matrix.suite == 'core'
        run: npx playwright test tests/e2e/core --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173
          TEST_SUPABASE_URL: http://localhost:54321
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}
          MOCK_AI_RESPONSES: true

      - name: Run E2E Tests - AI Features
        if: matrix.suite == 'ai'
        run: npx playwright test tests/e2e/ai --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173
          MOCK_AI_RESPONSES: true
          ENABLE_AI_MOCKS: true

      - name: Run E2E Tests - Advanced Features
        if: matrix.suite == 'advanced'
        run: npx playwright test tests/e2e/advanced --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173
          TEST_SUPABASE_URL: http://localhost:54321
          TEST_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}

      - name: Run E2E Tests - Accessibility
        if: matrix.suite == 'accessibility'
        run: npx playwright test tests/e2e/accessibility --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: Run E2E Tests - Cross-Browser
        if: matrix.suite == 'cross-browser'
        run: npx playwright test tests/e2e/cross-browser --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.suite }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload Screenshots on Failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.suite }}
          path: test-results/screenshots/
          retention-days: 3

  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:4173 --timeout 60000

      - name: Run Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          temporaryPublicStorage: true
          urls: |
            http://localhost:4173
            http://localhost:4173/auth
            http://localhost:4173/dashboard

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Run dependency check
        run: |
          npx npm-check-updates --doctor --fail --target minor
        continue-on-error: true

  performance-tests:
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'all'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install chromium --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:4173 --timeout 60000

      - name: Run Performance Tests
        run: npx playwright test tests/performance --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            playwright-report/
            test-results/performance/
          retention-days: 14

  test-summary:
    runs-on: ubuntu-latest
    needs: [build-and-test, lighthouse-audit, security-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Generate Test Summary
        run: |
          echo "# E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **E2E Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.lighthouse-audit.result }}" = "success" ]; then
            echo "✅ **Lighthouse Audit**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Lighthouse Audit**: Issues Found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ **Security Scan**: Clean" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan**: Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test reports and screenshots are available in the artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "- Performance metrics from Lighthouse are available for review" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [build-and-test, lighthouse-audit, security-scan]
    if: failure() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify on Slack
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 E2E Tests failed on main branch"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create Issue on Failure
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## E2E Test Failure Report
            
            The scheduled E2E tests have failed. Please investigate the following:
            
            - **Workflow Run**: [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - **Branch**: ${context.ref}
            - **Commit**: ${context.sha}
            
            ### Failed Jobs:
            ${{ needs.build-and-test.result == 'failure' ? '- E2E Tests' : '' }}
            ${{ needs.lighthouse-audit.result == 'failure' ? '- Lighthouse Audit' : '' }}
            ${{ needs.security-scan.result == 'failure' ? '- Security Scan' : '' }}
            
            Please check the workflow logs and artifacts for detailed information.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'e2e-failure', 'high-priority']
            });

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
              return ageInDays > 14; // Cleanup artifacts older than 14 days
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }